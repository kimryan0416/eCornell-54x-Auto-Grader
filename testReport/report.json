{
  "stats": {
    "suites": 10,
    "tests": 10,
    "passes": 8,
    "pending": 0,
    "failures": 2,
    "start": "2018-11-13T17:15:53.715Z",
    "end": "2018-11-13T17:15:53.781Z",
    "duration": 66,
    "testsRegistered": 10,
    "passPercent": 80,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "1539d656-b527-40fc-a721-25608fd95932",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "97363329-7b22-4c5c-acad-e85943e391f8",
        "title": "304: 100%, Content Only",
        "fullFile": "/Users/RK/Desktop/MAMP_WEB/cis54x/cis54xPackages/runner.js",
        "file": "/runner.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "304: 100%, Content Only \"before all\" hook",
            "timedOut": false,
            "duration": 8,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "determineIfFile(file1, res1=>{\n\tif (res1 == 0) {\n\t\tconditions = false;\n\t\tconditionsErrorMessage = 'File 1 is not a file...';\n\t\tdone();\n\t}\n\telse if (res1 == 1) {\n\t\tdetermineIfFile(file2, res2=>{\n\t\t\tif (res2 == 0) {\n\t\t\t\tconditions = false;\n\t\t\t\tconditionsErrorMessage = 'File 2 is not a file...';\n\t\t\t\tdone();\n\t\t\t}\n\t\t\telse if (res2 == 1) {\n\t\t\t\tfindDifference(file1, file2, contentOnly, diffRes=>{\n\t\t\t\t\tqueue.push({\n\t\t\t\t\t\t'file':file1,\n\t\t\t\t\t\t'rate':diffRes['file1Length']/diffRes['file2Length']\n\t\t\t\t\t});\n\t\t\t\t\tif ( diffRes['file1Length']/diffRes['file2Length'] < similarity ) hintsStatement += 'Similarity Rate: ' + (diffRes['file1Length']/diffRes['file2Length']) + '\\nExpected Similarity Minimum: ' + similarity;\n\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconditions = false;\n\t\t\t\tconditionsErrorMessage = 'determineIfFile() for File 2 never returned anything';\n\t\t\t\tdone();\n\t\t\t}\n\t\t});\n\t} else {\n\t\tconditions = false;\n\t\tconditionsErrorMessage = 'determineIfFile() for File 1 never returned anything';\n\t\tdone();\n\t}\n});",
            "err": {},
            "isRoot": false,
            "uuid": "de534828-fd07-46d5-8d9b-d7bf638898dc",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "304: 100%, Content Only \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "if ( conditions && hintsStatement.length > 0 ) this.currentTest.context = { \"title\":\"Hints\", \"value\":\"The similarity rate between the two files is too low:\\n\"+hintsStatement}\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "8c2a26c1-d81e-443f-80da-9e9a299a074c",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Checking only content",
            "fullTitle": "304: 100%, Content Only Checking only content",
            "timedOut": false,
            "duration": 2,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "context": "{\n  \"title\": \"Hints\",\n  \"value\": \"The similarity rate between the two files is too low:\\nSimilarity Rate: 0.9571511291256514\\nExpected Similarity Minimum: 1\"\n}",
            "code": "expect(conditions, conditionsErrorMessage).to.be.true;\nif (conditions) {\n\tqueue.forEach(function(d) {\n\t\texpect(d['rate']*100, d['file']+errorStatement).to.be.at.least(similarity*100);\n\t\t//console.log(d['rate']);\n\t\t//console.log(similarity)\n\t});\n}",
            "err": {
              "message": "tests/301-400/304/toCheck.html",
              "estack": "AssertionError: tests/301-400/304/toCheck.html: Similarity rate between two file contents was too low!: expected 95.71511291256513 to be at least 100\n    at /Users/RK/Desktop/MAMP_WEB/cis54x/cis54xPackages/301-400/304-compare-files.js:121:63\n    at Array.forEach (<anonymous>)\n    at Context.<anonymous> (301-400/304-compare-files.js:120:11)",
              "diff": "- 95.71511291256513\n+ 100\n"
            },
            "isRoot": false,
            "uuid": "bda87caf-1f5c-4d0d-b005-02b3d8bc4e2b",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "bda87caf-1f5c-4d0d-b005-02b3d8bc4e2b"
        ],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      },
      {
        "uuid": "4eb3509d-36f8-48d5-8aa4-f3513656ab92",
        "title": "100%, Whole format",
        "fullFile": "/Users/RK/Desktop/MAMP_WEB/cis54x/cis54xPackages/runner.js",
        "file": "/runner.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "100%, Whole format \"before all\" hook",
            "timedOut": false,
            "duration": 6,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "determineIfFile(file1, res1=>{\n\tif (res1 == 0) {\n\t\tconditions = false;\n\t\tconditionsErrorMessage = 'File 1 is not a file...';\n\t\tdone();\n\t}\n\telse if (res1 == 1) {\n\t\tdetermineIfFile(file2, res2=>{\n\t\t\tif (res2 == 0) {\n\t\t\t\tconditions = false;\n\t\t\t\tconditionsErrorMessage = 'File 2 is not a file...';\n\t\t\t\tdone();\n\t\t\t}\n\t\t\telse if (res2 == 1) {\n\t\t\t\tfindDifference(file1, file2, contentOnly, diffRes=>{\n\t\t\t\t\tqueue.push({\n\t\t\t\t\t\t'file':file1,\n\t\t\t\t\t\t'rate':diffRes['file1Length']/diffRes['file2Length']\n\t\t\t\t\t});\n\t\t\t\t\tif ( diffRes['file1Length']/diffRes['file2Length'] < similarity ) hintsStatement += 'Similarity Rate: ' + (diffRes['file1Length']/diffRes['file2Length']) + '\\nExpected Similarity Minimum: ' + similarity;\n\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconditions = false;\n\t\t\t\tconditionsErrorMessage = 'determineIfFile() for File 2 never returned anything';\n\t\t\t\tdone();\n\t\t\t}\n\t\t});\n\t} else {\n\t\tconditions = false;\n\t\tconditionsErrorMessage = 'determineIfFile() for File 1 never returned anything';\n\t\tdone();\n\t}\n});",
            "err": {},
            "isRoot": false,
            "uuid": "01e80e99-0bfc-4695-b466-17539433494c",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "100%, Whole format \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "if ( conditions && hintsStatement.length > 0 ) this.currentTest.context = { \"title\":\"Hints\", \"value\":\"The similarity rate between the two files is too low:\\n\"+hintsStatement}\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "9bca784c-ead9-498f-a450-0d39a99582fb",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Checking whole format",
            "fullTitle": "100%, Whole format Checking whole format",
            "timedOut": false,
            "duration": 1,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "context": "{\n  \"title\": \"Hints\",\n  \"value\": \"The similarity rate between the two files is too low:\\nSimilarity Rate: 0.9535410764872522\\nExpected Similarity Minimum: 1\"\n}",
            "code": "expect(conditions, conditionsErrorMessage).to.be.true;\nif (conditions) {\n\tqueue.forEach(function(d) {\n\t\texpect(d['rate']*100, d['file']+errorStatement).to.be.at.least(similarity*100);\n\t\t//console.log(d['rate']);\n\t\t//console.log(similarity)\n\t});\n}",
            "err": {
              "message": "tests/301-400/304/toCheck.html",
              "estack": "AssertionError: tests/301-400/304/toCheck.html: Similarity rate between two file contents was too low!: expected 95.35410764872522 to be at least 100\n    at /Users/RK/Desktop/MAMP_WEB/cis54x/cis54xPackages/301-400/304-compare-files.js:121:63\n    at Array.forEach (<anonymous>)\n    at Context.<anonymous> (301-400/304-compare-files.js:120:11)",
              "diff": "- 95.35410764872522\n+ 100\n"
            },
            "isRoot": false,
            "uuid": "d7faa58c-a86e-4cd3-8c1a-0dd70f237658",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "d7faa58c-a86e-4cd3-8c1a-0dd70f237658"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      },
      {
        "uuid": "a0597de7-22d4-43a1-9d2d-187ac1e3dc7d",
        "title": "304: 90%, Content Only",
        "fullFile": "/Users/RK/Desktop/MAMP_WEB/cis54x/cis54xPackages/runner.js",
        "file": "/runner.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "304: 90%, Content Only \"before all\" hook",
            "timedOut": false,
            "duration": 4,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "determineIfFile(file1, res1=>{\n\tif (res1 == 0) {\n\t\tconditions = false;\n\t\tconditionsErrorMessage = 'File 1 is not a file...';\n\t\tdone();\n\t}\n\telse if (res1 == 1) {\n\t\tdetermineIfFile(file2, res2=>{\n\t\t\tif (res2 == 0) {\n\t\t\t\tconditions = false;\n\t\t\t\tconditionsErrorMessage = 'File 2 is not a file...';\n\t\t\t\tdone();\n\t\t\t}\n\t\t\telse if (res2 == 1) {\n\t\t\t\tfindDifference(file1, file2, contentOnly, diffRes=>{\n\t\t\t\t\tqueue.push({\n\t\t\t\t\t\t'file':file1,\n\t\t\t\t\t\t'rate':diffRes['file1Length']/diffRes['file2Length']\n\t\t\t\t\t});\n\t\t\t\t\tif ( diffRes['file1Length']/diffRes['file2Length'] < similarity ) hintsStatement += 'Similarity Rate: ' + (diffRes['file1Length']/diffRes['file2Length']) + '\\nExpected Similarity Minimum: ' + similarity;\n\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconditions = false;\n\t\t\t\tconditionsErrorMessage = 'determineIfFile() for File 2 never returned anything';\n\t\t\t\tdone();\n\t\t\t}\n\t\t});\n\t} else {\n\t\tconditions = false;\n\t\tconditionsErrorMessage = 'determineIfFile() for File 1 never returned anything';\n\t\tdone();\n\t}\n});",
            "err": {},
            "isRoot": false,
            "uuid": "a29feafb-fe92-49f9-a00d-dc4f26af278d",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "304: 90%, Content Only \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "if ( conditions && hintsStatement.length > 0 ) this.currentTest.context = { \"title\":\"Hints\", \"value\":\"The similarity rate between the two files is too low:\\n\"+hintsStatement}\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "5651acd0-4128-4a8d-9576-e760066a7de0",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Checking only content",
            "fullTitle": "304: 90%, Content Only Checking only content",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(conditions, conditionsErrorMessage).to.be.true;\nif (conditions) {\n\tqueue.forEach(function(d) {\n\t\texpect(d['rate']*100, d['file']+errorStatement).to.be.at.least(similarity*100);\n\t\t//console.log(d['rate']);\n\t\t//console.log(similarity)\n\t});\n}",
            "err": {},
            "isRoot": false,
            "uuid": "849f610a-a2ec-4179-9b4b-569b9a815dcb",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "849f610a-a2ec-4179-9b4b-569b9a815dcb"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      },
      {
        "uuid": "34d3ad84-426e-4c36-abfa-3a351c5d9cd3",
        "title": "90%, Whole format",
        "fullFile": "/Users/RK/Desktop/MAMP_WEB/cis54x/cis54xPackages/runner.js",
        "file": "/runner.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "90%, Whole format \"before all\" hook",
            "timedOut": false,
            "duration": 5,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "determineIfFile(file1, res1=>{\n\tif (res1 == 0) {\n\t\tconditions = false;\n\t\tconditionsErrorMessage = 'File 1 is not a file...';\n\t\tdone();\n\t}\n\telse if (res1 == 1) {\n\t\tdetermineIfFile(file2, res2=>{\n\t\t\tif (res2 == 0) {\n\t\t\t\tconditions = false;\n\t\t\t\tconditionsErrorMessage = 'File 2 is not a file...';\n\t\t\t\tdone();\n\t\t\t}\n\t\t\telse if (res2 == 1) {\n\t\t\t\tfindDifference(file1, file2, contentOnly, diffRes=>{\n\t\t\t\t\tqueue.push({\n\t\t\t\t\t\t'file':file1,\n\t\t\t\t\t\t'rate':diffRes['file1Length']/diffRes['file2Length']\n\t\t\t\t\t});\n\t\t\t\t\tif ( diffRes['file1Length']/diffRes['file2Length'] < similarity ) hintsStatement += 'Similarity Rate: ' + (diffRes['file1Length']/diffRes['file2Length']) + '\\nExpected Similarity Minimum: ' + similarity;\n\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconditions = false;\n\t\t\t\tconditionsErrorMessage = 'determineIfFile() for File 2 never returned anything';\n\t\t\t\tdone();\n\t\t\t}\n\t\t});\n\t} else {\n\t\tconditions = false;\n\t\tconditionsErrorMessage = 'determineIfFile() for File 1 never returned anything';\n\t\tdone();\n\t}\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8811afcf-eac7-483d-bcbd-4bc625c55995",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "90%, Whole format \"after each\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "if ( conditions && hintsStatement.length > 0 ) this.currentTest.context = { \"title\":\"Hints\", \"value\":\"The similarity rate between the two files is too low:\\n\"+hintsStatement}\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "91df0ac4-6f90-4a37-800f-fa1d70fdf981",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Checking whole format",
            "fullTitle": "90%, Whole format Checking whole format",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(conditions, conditionsErrorMessage).to.be.true;\nif (conditions) {\n\tqueue.forEach(function(d) {\n\t\texpect(d['rate']*100, d['file']+errorStatement).to.be.at.least(similarity*100);\n\t\t//console.log(d['rate']);\n\t\t//console.log(similarity)\n\t});\n}",
            "err": {},
            "isRoot": false,
            "uuid": "6d4b066d-4d21-4afc-9ee4-9599b082a2b7",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "6d4b066d-4d21-4afc-9ee4-9599b082a2b7"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      },
      {
        "uuid": "7f0634e3-1cf0-4401-859d-b9cf1f1246d9",
        "title": "304: 75%, Content Only",
        "fullFile": "/Users/RK/Desktop/MAMP_WEB/cis54x/cis54xPackages/runner.js",
        "file": "/runner.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "304: 75%, Content Only \"before all\" hook",
            "timedOut": false,
            "duration": 4,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "determineIfFile(file1, res1=>{\n\tif (res1 == 0) {\n\t\tconditions = false;\n\t\tconditionsErrorMessage = 'File 1 is not a file...';\n\t\tdone();\n\t}\n\telse if (res1 == 1) {\n\t\tdetermineIfFile(file2, res2=>{\n\t\t\tif (res2 == 0) {\n\t\t\t\tconditions = false;\n\t\t\t\tconditionsErrorMessage = 'File 2 is not a file...';\n\t\t\t\tdone();\n\t\t\t}\n\t\t\telse if (res2 == 1) {\n\t\t\t\tfindDifference(file1, file2, contentOnly, diffRes=>{\n\t\t\t\t\tqueue.push({\n\t\t\t\t\t\t'file':file1,\n\t\t\t\t\t\t'rate':diffRes['file1Length']/diffRes['file2Length']\n\t\t\t\t\t});\n\t\t\t\t\tif ( diffRes['file1Length']/diffRes['file2Length'] < similarity ) hintsStatement += 'Similarity Rate: ' + (diffRes['file1Length']/diffRes['file2Length']) + '\\nExpected Similarity Minimum: ' + similarity;\n\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconditions = false;\n\t\t\t\tconditionsErrorMessage = 'determineIfFile() for File 2 never returned anything';\n\t\t\t\tdone();\n\t\t\t}\n\t\t});\n\t} else {\n\t\tconditions = false;\n\t\tconditionsErrorMessage = 'determineIfFile() for File 1 never returned anything';\n\t\tdone();\n\t}\n});",
            "err": {},
            "isRoot": false,
            "uuid": "2383c9f4-464d-4a2f-abc2-734f92fc79d5",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "304: 75%, Content Only \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "if ( conditions && hintsStatement.length > 0 ) this.currentTest.context = { \"title\":\"Hints\", \"value\":\"The similarity rate between the two files is too low:\\n\"+hintsStatement}\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "f8f7b09e-e877-4c87-85b2-246f536e4745",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Checking only content",
            "fullTitle": "304: 75%, Content Only Checking only content",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(conditions, conditionsErrorMessage).to.be.true;\nif (conditions) {\n\tqueue.forEach(function(d) {\n\t\texpect(d['rate']*100, d['file']+errorStatement).to.be.at.least(similarity*100);\n\t\t//console.log(d['rate']);\n\t\t//console.log(similarity)\n\t});\n}",
            "err": {},
            "isRoot": false,
            "uuid": "b1656d85-88f2-4a14-bf32-ce0877fe91d6",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "b1656d85-88f2-4a14-bf32-ce0877fe91d6"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      },
      {
        "uuid": "088de3a5-311d-4022-92ed-8afb8cd89491",
        "title": "75%, Whole format",
        "fullFile": "/Users/RK/Desktop/MAMP_WEB/cis54x/cis54xPackages/runner.js",
        "file": "/runner.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "75%, Whole format \"before all\" hook",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "determineIfFile(file1, res1=>{\n\tif (res1 == 0) {\n\t\tconditions = false;\n\t\tconditionsErrorMessage = 'File 1 is not a file...';\n\t\tdone();\n\t}\n\telse if (res1 == 1) {\n\t\tdetermineIfFile(file2, res2=>{\n\t\t\tif (res2 == 0) {\n\t\t\t\tconditions = false;\n\t\t\t\tconditionsErrorMessage = 'File 2 is not a file...';\n\t\t\t\tdone();\n\t\t\t}\n\t\t\telse if (res2 == 1) {\n\t\t\t\tfindDifference(file1, file2, contentOnly, diffRes=>{\n\t\t\t\t\tqueue.push({\n\t\t\t\t\t\t'file':file1,\n\t\t\t\t\t\t'rate':diffRes['file1Length']/diffRes['file2Length']\n\t\t\t\t\t});\n\t\t\t\t\tif ( diffRes['file1Length']/diffRes['file2Length'] < similarity ) hintsStatement += 'Similarity Rate: ' + (diffRes['file1Length']/diffRes['file2Length']) + '\\nExpected Similarity Minimum: ' + similarity;\n\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconditions = false;\n\t\t\t\tconditionsErrorMessage = 'determineIfFile() for File 2 never returned anything';\n\t\t\t\tdone();\n\t\t\t}\n\t\t});\n\t} else {\n\t\tconditions = false;\n\t\tconditionsErrorMessage = 'determineIfFile() for File 1 never returned anything';\n\t\tdone();\n\t}\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ab10f1c3-93e6-47ca-b135-23fd22231674",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "75%, Whole format \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "if ( conditions && hintsStatement.length > 0 ) this.currentTest.context = { \"title\":\"Hints\", \"value\":\"The similarity rate between the two files is too low:\\n\"+hintsStatement}\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "4deadebc-cf8d-4d4c-b84d-0dc25c526b2d",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Checking whole format",
            "fullTitle": "75%, Whole format Checking whole format",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(conditions, conditionsErrorMessage).to.be.true;\nif (conditions) {\n\tqueue.forEach(function(d) {\n\t\texpect(d['rate']*100, d['file']+errorStatement).to.be.at.least(similarity*100);\n\t\t//console.log(d['rate']);\n\t\t//console.log(similarity)\n\t});\n}",
            "err": {},
            "isRoot": false,
            "uuid": "b252ea41-ba2c-4d6a-b7ba-80d4fe9ee833",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "b252ea41-ba2c-4d6a-b7ba-80d4fe9ee833"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      },
      {
        "uuid": "aa5d9da2-d63a-4d68-947c-4ff9c176bd21",
        "title": "304: 50%, Content Only",
        "fullFile": "/Users/RK/Desktop/MAMP_WEB/cis54x/cis54xPackages/runner.js",
        "file": "/runner.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "304: 50%, Content Only \"before all\" hook",
            "timedOut": false,
            "duration": 5,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "determineIfFile(file1, res1=>{\n\tif (res1 == 0) {\n\t\tconditions = false;\n\t\tconditionsErrorMessage = 'File 1 is not a file...';\n\t\tdone();\n\t}\n\telse if (res1 == 1) {\n\t\tdetermineIfFile(file2, res2=>{\n\t\t\tif (res2 == 0) {\n\t\t\t\tconditions = false;\n\t\t\t\tconditionsErrorMessage = 'File 2 is not a file...';\n\t\t\t\tdone();\n\t\t\t}\n\t\t\telse if (res2 == 1) {\n\t\t\t\tfindDifference(file1, file2, contentOnly, diffRes=>{\n\t\t\t\t\tqueue.push({\n\t\t\t\t\t\t'file':file1,\n\t\t\t\t\t\t'rate':diffRes['file1Length']/diffRes['file2Length']\n\t\t\t\t\t});\n\t\t\t\t\tif ( diffRes['file1Length']/diffRes['file2Length'] < similarity ) hintsStatement += 'Similarity Rate: ' + (diffRes['file1Length']/diffRes['file2Length']) + '\\nExpected Similarity Minimum: ' + similarity;\n\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconditions = false;\n\t\t\t\tconditionsErrorMessage = 'determineIfFile() for File 2 never returned anything';\n\t\t\t\tdone();\n\t\t\t}\n\t\t});\n\t} else {\n\t\tconditions = false;\n\t\tconditionsErrorMessage = 'determineIfFile() for File 1 never returned anything';\n\t\tdone();\n\t}\n});",
            "err": {},
            "isRoot": false,
            "uuid": "2ffccaa2-7cb4-46fb-b442-5ad4831cd9e5",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "304: 50%, Content Only \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "if ( conditions && hintsStatement.length > 0 ) this.currentTest.context = { \"title\":\"Hints\", \"value\":\"The similarity rate between the two files is too low:\\n\"+hintsStatement}\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "94110fab-83ee-4043-9828-f4c86a5ecc10",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Checking only content",
            "fullTitle": "304: 50%, Content Only Checking only content",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(conditions, conditionsErrorMessage).to.be.true;\nif (conditions) {\n\tqueue.forEach(function(d) {\n\t\texpect(d['rate']*100, d['file']+errorStatement).to.be.at.least(similarity*100);\n\t\t//console.log(d['rate']);\n\t\t//console.log(similarity)\n\t});\n}",
            "err": {},
            "isRoot": false,
            "uuid": "d06eaf48-cbef-40f8-a8e9-c4725ae65472",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "d06eaf48-cbef-40f8-a8e9-c4725ae65472"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      },
      {
        "uuid": "75743415-b0c6-4e46-898d-557f52240461",
        "title": "50%, Whole format",
        "fullFile": "/Users/RK/Desktop/MAMP_WEB/cis54x/cis54xPackages/runner.js",
        "file": "/runner.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "50%, Whole format \"before all\" hook",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "determineIfFile(file1, res1=>{\n\tif (res1 == 0) {\n\t\tconditions = false;\n\t\tconditionsErrorMessage = 'File 1 is not a file...';\n\t\tdone();\n\t}\n\telse if (res1 == 1) {\n\t\tdetermineIfFile(file2, res2=>{\n\t\t\tif (res2 == 0) {\n\t\t\t\tconditions = false;\n\t\t\t\tconditionsErrorMessage = 'File 2 is not a file...';\n\t\t\t\tdone();\n\t\t\t}\n\t\t\telse if (res2 == 1) {\n\t\t\t\tfindDifference(file1, file2, contentOnly, diffRes=>{\n\t\t\t\t\tqueue.push({\n\t\t\t\t\t\t'file':file1,\n\t\t\t\t\t\t'rate':diffRes['file1Length']/diffRes['file2Length']\n\t\t\t\t\t});\n\t\t\t\t\tif ( diffRes['file1Length']/diffRes['file2Length'] < similarity ) hintsStatement += 'Similarity Rate: ' + (diffRes['file1Length']/diffRes['file2Length']) + '\\nExpected Similarity Minimum: ' + similarity;\n\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconditions = false;\n\t\t\t\tconditionsErrorMessage = 'determineIfFile() for File 2 never returned anything';\n\t\t\t\tdone();\n\t\t\t}\n\t\t});\n\t} else {\n\t\tconditions = false;\n\t\tconditionsErrorMessage = 'determineIfFile() for File 1 never returned anything';\n\t\tdone();\n\t}\n});",
            "err": {},
            "isRoot": false,
            "uuid": "a0614d96-d969-4de4-a718-ca343a01000e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "50%, Whole format \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "if ( conditions && hintsStatement.length > 0 ) this.currentTest.context = { \"title\":\"Hints\", \"value\":\"The similarity rate between the two files is too low:\\n\"+hintsStatement}\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "eccb8632-c980-48cc-96c2-884e1835f488",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Checking whole format",
            "fullTitle": "50%, Whole format Checking whole format",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(conditions, conditionsErrorMessage).to.be.true;\nif (conditions) {\n\tqueue.forEach(function(d) {\n\t\texpect(d['rate']*100, d['file']+errorStatement).to.be.at.least(similarity*100);\n\t\t//console.log(d['rate']);\n\t\t//console.log(similarity)\n\t});\n}",
            "err": {},
            "isRoot": false,
            "uuid": "e9ffd1e4-9625-42a1-b0e1-5619304f4622",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "e9ffd1e4-9625-42a1-b0e1-5619304f4622"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      },
      {
        "uuid": "311d672a-9426-46ca-a684-dc02adca38d2",
        "title": "304: 25%, Content Only",
        "fullFile": "/Users/RK/Desktop/MAMP_WEB/cis54x/cis54xPackages/runner.js",
        "file": "/runner.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "304: 25%, Content Only \"before all\" hook",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "determineIfFile(file1, res1=>{\n\tif (res1 == 0) {\n\t\tconditions = false;\n\t\tconditionsErrorMessage = 'File 1 is not a file...';\n\t\tdone();\n\t}\n\telse if (res1 == 1) {\n\t\tdetermineIfFile(file2, res2=>{\n\t\t\tif (res2 == 0) {\n\t\t\t\tconditions = false;\n\t\t\t\tconditionsErrorMessage = 'File 2 is not a file...';\n\t\t\t\tdone();\n\t\t\t}\n\t\t\telse if (res2 == 1) {\n\t\t\t\tfindDifference(file1, file2, contentOnly, diffRes=>{\n\t\t\t\t\tqueue.push({\n\t\t\t\t\t\t'file':file1,\n\t\t\t\t\t\t'rate':diffRes['file1Length']/diffRes['file2Length']\n\t\t\t\t\t});\n\t\t\t\t\tif ( diffRes['file1Length']/diffRes['file2Length'] < similarity ) hintsStatement += 'Similarity Rate: ' + (diffRes['file1Length']/diffRes['file2Length']) + '\\nExpected Similarity Minimum: ' + similarity;\n\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconditions = false;\n\t\t\t\tconditionsErrorMessage = 'determineIfFile() for File 2 never returned anything';\n\t\t\t\tdone();\n\t\t\t}\n\t\t});\n\t} else {\n\t\tconditions = false;\n\t\tconditionsErrorMessage = 'determineIfFile() for File 1 never returned anything';\n\t\tdone();\n\t}\n});",
            "err": {},
            "isRoot": false,
            "uuid": "e9a6774a-e2d1-44e2-9e5b-e75264ed0ee1",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "304: 25%, Content Only \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "if ( conditions && hintsStatement.length > 0 ) this.currentTest.context = { \"title\":\"Hints\", \"value\":\"The similarity rate between the two files is too low:\\n\"+hintsStatement}\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "de3a19f5-8d13-45b6-b765-2440002cd4e9",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Checking only content",
            "fullTitle": "304: 25%, Content Only Checking only content",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(conditions, conditionsErrorMessage).to.be.true;\nif (conditions) {\n\tqueue.forEach(function(d) {\n\t\texpect(d['rate']*100, d['file']+errorStatement).to.be.at.least(similarity*100);\n\t\t//console.log(d['rate']);\n\t\t//console.log(similarity)\n\t});\n}",
            "err": {},
            "isRoot": false,
            "uuid": "eae2aff3-5b18-4a08-866a-12202ef0739b",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "eae2aff3-5b18-4a08-866a-12202ef0739b"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      },
      {
        "uuid": "e0a29923-199c-4c63-9dc0-66ed744c68a6",
        "title": "25%, Whole format",
        "fullFile": "/Users/RK/Desktop/MAMP_WEB/cis54x/cis54xPackages/runner.js",
        "file": "/runner.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "25%, Whole format \"before all\" hook",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "determineIfFile(file1, res1=>{\n\tif (res1 == 0) {\n\t\tconditions = false;\n\t\tconditionsErrorMessage = 'File 1 is not a file...';\n\t\tdone();\n\t}\n\telse if (res1 == 1) {\n\t\tdetermineIfFile(file2, res2=>{\n\t\t\tif (res2 == 0) {\n\t\t\t\tconditions = false;\n\t\t\t\tconditionsErrorMessage = 'File 2 is not a file...';\n\t\t\t\tdone();\n\t\t\t}\n\t\t\telse if (res2 == 1) {\n\t\t\t\tfindDifference(file1, file2, contentOnly, diffRes=>{\n\t\t\t\t\tqueue.push({\n\t\t\t\t\t\t'file':file1,\n\t\t\t\t\t\t'rate':diffRes['file1Length']/diffRes['file2Length']\n\t\t\t\t\t});\n\t\t\t\t\tif ( diffRes['file1Length']/diffRes['file2Length'] < similarity ) hintsStatement += 'Similarity Rate: ' + (diffRes['file1Length']/diffRes['file2Length']) + '\\nExpected Similarity Minimum: ' + similarity;\n\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconditions = false;\n\t\t\t\tconditionsErrorMessage = 'determineIfFile() for File 2 never returned anything';\n\t\t\t\tdone();\n\t\t\t}\n\t\t});\n\t} else {\n\t\tconditions = false;\n\t\tconditionsErrorMessage = 'determineIfFile() for File 1 never returned anything';\n\t\tdone();\n\t}\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f8de0ecd-3749-43f1-8d0c-c741717f9764",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "25%, Whole format \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "if ( conditions && hintsStatement.length > 0 ) this.currentTest.context = { \"title\":\"Hints\", \"value\":\"The similarity rate between the two files is too low:\\n\"+hintsStatement}\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "c154e6d6-40d5-4a5a-b299-1fe10b52a087",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Checking whole format",
            "fullTitle": "25%, Whole format Checking whole format",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(conditions, conditionsErrorMessage).to.be.true;\nif (conditions) {\n\tqueue.forEach(function(d) {\n\t\texpect(d['rate']*100, d['file']+errorStatement).to.be.at.least(similarity*100);\n\t\t//console.log(d['rate']);\n\t\t//console.log(similarity)\n\t});\n}",
            "err": {},
            "isRoot": false,
            "uuid": "89abf2f4-397b-48ca-a046-e8f9fab185db",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "89abf2f4-397b-48ca-a046-e8f9fab185db"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 20000
  },
  "copyrightYear": 2018
}